// Given a number N return the index value of the Fibonacci sequence, where the sequence is:
// 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144 ...
// the pattern of the sequence is that each value is the sum of the 2 previous values, that means that for N=5 â†’ 2+3

//For example: fibonacciRecursive(6) should return 8

Solution A:


//Time Complexity: O(n), Space Complexity: O(1)
function fibonacciIterative(n){

  let firstValue = 0;
  let secondValue = 1;
  let thirdValue;

  for(let i = 0; i < n - 1; i++){
    thirdValue = firstValue + secondValue;
    firstValue = secondValue;
    secondValue = thirdValue;
  }

  return thirdValue
}

fibonacciIterative(6);

______________________________________________________________________________________________________________________

Solution B:

//Time Complexity: O(2^n), Space Complexity: O(1)
function fibonacciRecursive(n) {
  //base case because when the index of n is 0 or 1, its integer value is also always 0 and 1.
  if(n < 2){
    return n
  } else {
    return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2)
  }
}

fibonacciRecursive(6)

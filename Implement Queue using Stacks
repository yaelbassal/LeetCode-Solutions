/**
 * Initialize your data structure here.
 */
var MyQueue = function() {
    this.first = [];
    this.last = []; 
};

/**
 * Push element x to the back of queue. 
 * @param {number} x
 * @return {void}
 */
MyQueue.prototype.push = function(x) {//time complexity: O(n)
    const length = this.first.length;
    for(let i = 0; i < length; i++){
        let lastElementFromFirst = this.first.pop();
        this.last.push(lastElementFromFirst)
    }
    this.last.push(x)
    return this
};

/**
 * Removes the element from in front of queue and returns that element.
 * @return {number}
 */
MyQueue.prototype.pop = function() {//time complexity: O(n)
    const length = this.last.length;
    for(let i = 0; i < length; i++){
        let lastElementFromLast = this.last.pop()
        this.first.push(lastElementFromLast)
    }
    return this.first.pop()
};

/**
 * Get the front element.
 * @return {number}
 */
MyQueue.prototype.peek = function() { //time complexity: O(1)
    if(this.last.length > 0) {
        return this.last[0]
    } else {
        return this.first[this.first.length - 1]
    } 
};

/**
 * Returns whether the queue is empty.
 * @return {boolean}
 */
MyQueue.prototype.empty = function() {
    if (this.first.length === 0 && this.last.length === 0){ //time complexity: O(1)
        return true
    } else {
        return false
    }
};

/** 
 * Your MyQueue object will be instantiated and called as such:
 * var obj = new MyQueue()
 * obj.push(x)
 * var param_2 = obj.pop()
 * var param_3 = obj.peek()
 * var param_4 = obj.empty()
 */

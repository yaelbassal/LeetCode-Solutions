//Solution A: Time Complexity O(n^2) Loop runs n(n-1)/2 times, Space Complexity O(1)

var maxProfit = function (prices) {
  let greatestProfit = 0;

  if (prices.length === 1) {
    return greatestProfit;
  }

  //in for loop, for every buying price possibility, selling price possibilities start at one index after it. 
  for (let i = 0; i < prices.length; i++) {
    let buyPrice = prices[i];
    for (let j = i + 1; j < prices.length; j++) {
      let sellPrice = prices[j];
      //check if there can be profit from the transaction. If there is, compare the value with the value at greatestProfit. 
      if (sellPrice > buyPrice) {
        let profit = sellPrice - buyPrice;
        if (profit > greatestProfit) {
          greatestProfit = profit;
        }
      }
    }
  }

  return greatestProfit;
};

//Solution B: Time Complexity O(n^2) Loop runs n(n-1)/2 times, Space Complexity O(n^2)

var maxProfit = function (prices) {
  let cache = new Set();
  let greatestProfit = 0;

  if (prices.length === 1) {
    return greatestProfit;
  }

  for (let i = 0; i < prices.length; i++) {
    let buyPrice = prices[i];
    for (let j = i + 1; j < prices.length; j++) {
      let sellPrice = prices[j];

      if (sellPrice > buyPrice) {
        let profit = sellPrice - buyPrice;
        cache.add(profit);
      }
    }
  }

  if (cache.size > 0) {
    cache.forEach(function (val) {
      if (val > greatestProfit) {
        greatestProfit = val;
      }
    });
  }

  return greatestProfit;
};


// Solution C: Optimal Solution => Time Complexity O(n), Space Complexity O(1)

var maxProfit = function (prices) {
  let greatestProfit = 0;

  if (prices.length === 1) {
    return greatestProfit;
  }
  
  //slow pointer  
  let buyPointer = 0;
    
  //fast pointer
  let sellPointer = 1;
  
    
  while(sellPointer < prices.length){
      
      //if the buying price is less than the selling price....
      if(prices[buyPointer] < prices[sellPointer]){
          
          //calculate profit
          let profit = prices[sellPointer] - prices[buyPointer]
          
          //update greatest profit if statement is true
          if(profit > greatestProfit){
              greatestProfit = profit
          }
          
          //increment sellPointer
          sellPointer++
      }
      
      //if the selling price is less than the buying price
      if(prices[buyPointer] >= prices[sellPointer]){
          
          //move the buyPointer to the index of lower price in the prices array (currently the value of sellPointer). 
          //Note: profits for the buyPointer have already been calculated. This new lower buying price will have a greater profit as we come across new possible selling prices.  
          buyPointer = sellPointer
          sellPointer++
          
      }
      
  }
    
    
  return greatestProfit;
};


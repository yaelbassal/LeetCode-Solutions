//Time Complexity: O(n), Space Complexity: 0(1) 

var canPlaceFlowers = function(flowerbed, n) {
    
    let possibleFlowerCounter = 0;
    let indexPointerOnes;
    
    //1. iterate through array, 
    //2. if value is 1, store the index of the most recent 1. 
    //3. if the value is 0, check the index of the most recent 1. If the difference is 2 or greater, and if the next value is not one, add a flower.
         - take edge case into consideration. If we have a 0 value at index 0. 
    //4. update flowerbed and the most recent index of 1.
    
    for(let i=0; i < flowerbed.length; i++){
        
        if(flowerbed[i] === 1){
            indexPointerOnes = i
        } else {
            let isNotAdjacent = (i - indexPointerOnes) > 1
            if(i === 0 && flowerbed[i+1] !== 1 || isNotAdjacent && flowerbed[i+1] !== 1){
                possibleFlowerCounter += 1;
                flowerbed[i] = 1;
                indexPointerOnes = i;
            }
            if(possibleFlowerCounter >= n){
              return true
            }
            
        }
        
    }
    
    
    //compare n and counter. If the counter is equal to or greater than n, return true.
    if(possibleFlowerCounter >= n){
        return true
    } else {
        return false 
    }
    
};

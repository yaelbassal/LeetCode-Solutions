
SOLUTION A:

//BigO Time Complexity: O(n^3), Space Complexity: O(n * 4^n)

function wordCombinations(intString) {
  //fake list of valid words for "117" combination
  const dictionary = ["act", "cat", "bat"];

  const hashTable = {
    1: "abc",
    2: "def",
    3: "ghi",
    4: "jkl",
    5: "mno",
    6: "pqrs",
    7: "tuv",
    8: "wxyz",
  }; //Space Complexity: O(1)

  let intStringArray = intString.split(""); //Space Complexity: O(1)

  let tempNewCombinations = []; //Space Complexity: O(n * 4^n)

  let newCombinations = []; //Space Complexity: O(n * 4^n)

  for (let i = 0; i < intStringArray.length; i++) {
    //Space Complexity: O(1) b/c memory is reused)

    let possibleLetters = hashTable[intStringArray[i]]; //Space Complexity: O(1) b/c memory is reused)

    if (newCombinations.length < 1) {
      for (let j = 0; j < possibleLetters.length; j++) {
        //Space Complexity: O(1)

        newCombinations.push(possibleLetters[j]);
      }
    } else {
      for (let k = 0; k < newCombinations.length; k++) {
        //Space Complexity: O(1) b/c memory is reused)

        for (let y = 0; y < possibleLetters.length; y++) {
          //Space Complexity: O(1) b/c memory is reused)

          tempNewCombinations.push(newCombinations[k] + possibleLetters[y]);
        }
      }

      newCombinations = [...tempNewCombinations]; //Space Complexity: O(1) b/c memory is reused)
      tempNewCombinations = []; //Space Complexity: O(1) b/c memory is reused)
    } //end of else statement
  } //end of outer for loop

  const result = newCombinations.filter((word) => {
    //returns a new array called result that includes only the valid words from the newCombinations array
    if(dictionary.includes(word)){
      return word
    }
  })

  return result;
}

wordCombinations("117");

SOLUTION B:

function wordCombinations(intString) {
  //fake list of valid words for "117" combination
  const dictionary = ["act", "cat", "bat"];

  //hash table stores letter values correlating to each number
  const hashTable = {
    1: "abc",
    2: "def",
    3: "ghi",
    4: "jkl",
    5: "mno",
    6: "pqrs",
    7: "tuv",
    8: "wxyz",
  };

  //splits input string into an array, example: "[ '1', '1', '7' ]"
  let intStringArray = intString.split("");

  //stores valid letter combinations temporarily
  let tempNewCombinations = [];

  //stores valid letter combinations
  let newCombinations = [];

  for (let i = 0; i < intStringArray.length; i++) {

    //outer for loop, iterates through the input number array and creates a variable with all possible letter values for each number as a string.
    let possibleLetters = hashTable[intStringArray[i]];

    //if this is the first time going through the outer for loop
    if (newCombinations.length < 1) {
      for (let j = 0; j < possibleLetters.length; j++) {
        //add each possible letter to newCombinations. This array will need to be used going forward to add new letters to the end of the words.
        newCombinations.push(possibleLetters[j]);
      }
    } else {//otherwise...
      //Using a nested for loop, for each word in newCombinations array, concate to the end all possible letters from the value of intStringArr[i].. Add these new values to tempNewCombinations only if they are valid.
      for (let k = 0; k < newCombinations.length; k++) {
        for (let y = 0; y < possibleLetters.length; y++) {
          let newPossibleWord = newCombinations[k] + possibleLetters[y];

          dictionary.forEach((word) => {
            if (word.startsWith(newPossibleWord) && !tempNewCombinations.includes(newPossibleWord)) {
              tempNewCombinations.push(newPossibleWord);
            }
          });
        }
      }

      newCombinations = [...tempNewCombinations];

      tempNewCombinations = [];
    } //end of else statement
  } //end of outer for loop


  return newCombinations;
}

wordCombinations("117");
